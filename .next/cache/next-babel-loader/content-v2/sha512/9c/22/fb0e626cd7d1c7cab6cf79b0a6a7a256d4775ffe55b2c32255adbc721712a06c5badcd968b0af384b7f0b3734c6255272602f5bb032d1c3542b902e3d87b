{"ast":null,"code":"import _regeneratorRuntime from \"/media/jorge/Novo volume/DEV/Workspace/angelashimabukuro/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/media/jorge/Novo volume/DEV/Workspace/angelashimabukuro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nvar apiURL = process.env.NEXT_PUBLIC_API_URL;\n\nfunction fetchQuery(_x) {\n  return _fetchQuery.apply(this, arguments);\n}\n\nfunction _fetchQuery() {\n  _fetchQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var params,\n        url,\n        response,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n\n            if (params !== null) {\n              url = \"\".concat(apiURL, \"/\").concat(path, \"/\").concat(params);\n            } else {\n              url = \"\".concat(apiURL, \"/\").concat(path);\n            }\n\n            _context.next = 4;\n            return fetch(\"\".concat(url));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchQuery.apply(this, arguments);\n}\n\nexport { apiURL, fetchQuery };","map":{"version":3,"sources":["/media/jorge/Novo volume/DEV/Workspace/angelashimabukuro/src/lib/utils.js"],"names":["fetch","apiURL","process","env","NEXT_PUBLIC_API_URL","fetchQuery","path","params","url","response","json","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA3B;;SACeC,U;;;;;yEAAf,iBAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCC,YAAAA,MAAhC,2DAAyC,IAAzC;;AAEE,gBAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBC,cAAAA,GAAG,aAAMP,MAAN,cAAgBK,IAAhB,cAAwBC,MAAxB,CAAH;AACD,aAFD,MAGK;AACHC,cAAAA,GAAG,aAAMP,MAAN,cAAgBK,IAAhB,CAAH;AACD;;AAPH;AAAA,mBASyBN,KAAK,WAAIQ,GAAJ,EAT9B;;AAAA;AASQC,YAAAA,QATR;AAAA;AAAA,mBAUqBA,QAAQ,CAACC,IAAT,EAVrB;;AAAA;AAUQC,YAAAA,IAVR;AAAA,6CAWSA,IAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcA,SAASV,MAAT,EAAiBI,UAAjB","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nconst apiURL = process.env.NEXT_PUBLIC_API_URL\nasync function fetchQuery(path, params = null) {\n  let url\n  if (params !== null) {\n    url = `${apiURL}/${path}/${params}`\n  }\n  else {\n    url = `${apiURL}/${path}`\n  }\n\n  const response = await fetch(`${url}`)\n  const data = await response.json()\n  return data\n}\n\nexport { apiURL, fetchQuery }"]},"metadata":{},"sourceType":"module"}